<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- dataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${db.master.url}" />
		<property name="username" value="${db.master.user}" />
		<property name="password" value="${db.master.password}" />
		<property name="driverClassName" value="${db.master.driver}" />
		<property name="initialSize" value="5" />
		<property name="maxActive" value="100" />
		<property name="minIdle" value="10" />
		<property name="maxWait" value="60000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="600000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="1800" />
		<property name="logAbandoned" value="true" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="config,mergeStat,wall,log4j2" />
		<property name="connectionProperties" value="config.decrypt=true" />
	</bean>

	<!-- Spring整合Mybatis -->
	<bean id="sqlSessionFactory"
		class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描Mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:/sqlMapperXml/*.xml"></property>
		<property name="configLocation" value="classpath:config/mybatis-config.xml"></property>
		<property name="typeAliasesPackage" value="com.github.dubbo.model" />
		<property name="globalConfig" ref="globalConfig" />
		<property name="plugins">
			<array>
				<!-- 分页插件配置 -->
				<bean id="paginationInterceptor"
					class="com.baomidou.mybatisplus.plugins.PaginationInterceptor">
					<property name="dialectType" value="mysql" />
					<property name="optimizeType" value="aliDruid" />
				</bean>
			</array>
		</property>
	</bean>

	<!-- MP 全局配置 -->
	<bean id="globalConfig" class="com.baomidou.mybatisplus.entity.GlobalConfiguration">
		<property name="idType" value="0" />
		<property name="dbColumnUnderline" value="true" />
	</bean>

	<!-- MyBatis 动态实现 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 对Dao 接口动态实现，需要知道接口在哪 -->
		<property name="basePackage" value="com.github.dubbo.mapper" />
	</bean>

	<!-- 事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 事务注解 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	<!-- 事务管理 属性 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- <tx:method name="select*" propagation="REQUIRED" read-only="true" 
				/> -->
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="do*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="handle*" propagation="REQUIRED" rollback-for="Exception" />
			<!-- <tx:method name="*" propagation="REQUIRED" / -->
		</tx:attributes>
	</tx:advice>

	<!-- 配置切面 -->
	<aop:config expose-proxy="true" proxy-target-class="true">
		<aop:advisor advice-ref="transactionAdvice"
			pointcut="execution(* com.github.dubbo.service..*.*(..)) or execution(* com.github.dubbo.mq.*.*(..))" />
	</aop:config>
</beans>